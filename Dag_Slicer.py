# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Dag_Slicer', [dirname(__file__)])
        except ImportError:
            import _Dag_Slicer
            return _Dag_Slicer
        if fp is not None:
            try:
                _mod = imp.load_module('_Dag_Slicer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Dag_Slicer = swig_import_helper()
    del swig_import_helper
else:
    import _Dag_Slicer
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Dag_Slicer.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Dag_Slicer.SwigPyIterator_value(self)
    def incr(self, n=1): return _Dag_Slicer.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _Dag_Slicer.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Dag_Slicer.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Dag_Slicer.SwigPyIterator_equal(self, *args)
    def copy(self): return _Dag_Slicer.SwigPyIterator_copy(self)
    def next(self): return _Dag_Slicer.SwigPyIterator_next(self)
    def __next__(self): return _Dag_Slicer.SwigPyIterator___next__(self)
    def previous(self): return _Dag_Slicer.SwigPyIterator_previous(self)
    def advance(self, *args): return _Dag_Slicer.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Dag_Slicer.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Dag_Slicer.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Dag_Slicer.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Dag_Slicer.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Dag_Slicer.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Dag_Slicer.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _Dag_Slicer.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VecDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecDouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _Dag_Slicer.VecDouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Dag_Slicer.VecDouble___nonzero__(self)
    def __bool__(self): return _Dag_Slicer.VecDouble___bool__(self)
    def __len__(self): return _Dag_Slicer.VecDouble___len__(self)
    def pop(self): return _Dag_Slicer.VecDouble_pop(self)
    def __getslice__(self, *args): return _Dag_Slicer.VecDouble___getslice__(self, *args)
    def __setslice__(self, *args): return _Dag_Slicer.VecDouble___setslice__(self, *args)
    def __delslice__(self, *args): return _Dag_Slicer.VecDouble___delslice__(self, *args)
    def __delitem__(self, *args): return _Dag_Slicer.VecDouble___delitem__(self, *args)
    def __getitem__(self, *args): return _Dag_Slicer.VecDouble___getitem__(self, *args)
    def __setitem__(self, *args): return _Dag_Slicer.VecDouble___setitem__(self, *args)
    def append(self, *args): return _Dag_Slicer.VecDouble_append(self, *args)
    def empty(self): return _Dag_Slicer.VecDouble_empty(self)
    def size(self): return _Dag_Slicer.VecDouble_size(self)
    def clear(self): return _Dag_Slicer.VecDouble_clear(self)
    def swap(self, *args): return _Dag_Slicer.VecDouble_swap(self, *args)
    def get_allocator(self): return _Dag_Slicer.VecDouble_get_allocator(self)
    def begin(self): return _Dag_Slicer.VecDouble_begin(self)
    def end(self): return _Dag_Slicer.VecDouble_end(self)
    def rbegin(self): return _Dag_Slicer.VecDouble_rbegin(self)
    def rend(self): return _Dag_Slicer.VecDouble_rend(self)
    def pop_back(self): return _Dag_Slicer.VecDouble_pop_back(self)
    def erase(self, *args): return _Dag_Slicer.VecDouble_erase(self, *args)
    def __init__(self, *args): 
        this = _Dag_Slicer.new_VecDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Dag_Slicer.VecDouble_push_back(self, *args)
    def front(self): return _Dag_Slicer.VecDouble_front(self)
    def back(self): return _Dag_Slicer.VecDouble_back(self)
    def assign(self, *args): return _Dag_Slicer.VecDouble_assign(self, *args)
    def resize(self, *args): return _Dag_Slicer.VecDouble_resize(self, *args)
    def insert(self, *args): return _Dag_Slicer.VecDouble_insert(self, *args)
    def reserve(self, *args): return _Dag_Slicer.VecDouble_reserve(self, *args)
    def capacity(self): return _Dag_Slicer.VecDouble_capacity(self)
    __swig_destroy__ = _Dag_Slicer.delete_VecDouble
    __del__ = lambda self : None;
VecDouble_swigregister = _Dag_Slicer.VecDouble_swigregister
VecDouble_swigregister(VecDouble)

class VecVecdouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecdouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecdouble, name)
    __repr__ = _swig_repr
    def iterator(self): return _Dag_Slicer.VecVecdouble_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Dag_Slicer.VecVecdouble___nonzero__(self)
    def __bool__(self): return _Dag_Slicer.VecVecdouble___bool__(self)
    def __len__(self): return _Dag_Slicer.VecVecdouble___len__(self)
    def pop(self): return _Dag_Slicer.VecVecdouble_pop(self)
    def __getslice__(self, *args): return _Dag_Slicer.VecVecdouble___getslice__(self, *args)
    def __setslice__(self, *args): return _Dag_Slicer.VecVecdouble___setslice__(self, *args)
    def __delslice__(self, *args): return _Dag_Slicer.VecVecdouble___delslice__(self, *args)
    def __delitem__(self, *args): return _Dag_Slicer.VecVecdouble___delitem__(self, *args)
    def __getitem__(self, *args): return _Dag_Slicer.VecVecdouble___getitem__(self, *args)
    def __setitem__(self, *args): return _Dag_Slicer.VecVecdouble___setitem__(self, *args)
    def append(self, *args): return _Dag_Slicer.VecVecdouble_append(self, *args)
    def empty(self): return _Dag_Slicer.VecVecdouble_empty(self)
    def size(self): return _Dag_Slicer.VecVecdouble_size(self)
    def clear(self): return _Dag_Slicer.VecVecdouble_clear(self)
    def swap(self, *args): return _Dag_Slicer.VecVecdouble_swap(self, *args)
    def get_allocator(self): return _Dag_Slicer.VecVecdouble_get_allocator(self)
    def begin(self): return _Dag_Slicer.VecVecdouble_begin(self)
    def end(self): return _Dag_Slicer.VecVecdouble_end(self)
    def rbegin(self): return _Dag_Slicer.VecVecdouble_rbegin(self)
    def rend(self): return _Dag_Slicer.VecVecdouble_rend(self)
    def pop_back(self): return _Dag_Slicer.VecVecdouble_pop_back(self)
    def erase(self, *args): return _Dag_Slicer.VecVecdouble_erase(self, *args)
    def __init__(self, *args): 
        this = _Dag_Slicer.new_VecVecdouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Dag_Slicer.VecVecdouble_push_back(self, *args)
    def front(self): return _Dag_Slicer.VecVecdouble_front(self)
    def back(self): return _Dag_Slicer.VecVecdouble_back(self)
    def assign(self, *args): return _Dag_Slicer.VecVecdouble_assign(self, *args)
    def resize(self, *args): return _Dag_Slicer.VecVecdouble_resize(self, *args)
    def insert(self, *args): return _Dag_Slicer.VecVecdouble_insert(self, *args)
    def reserve(self, *args): return _Dag_Slicer.VecVecdouble_reserve(self, *args)
    def capacity(self): return _Dag_Slicer.VecVecdouble_capacity(self)
    __swig_destroy__ = _Dag_Slicer.delete_VecVecdouble
    __del__ = lambda self : None;
VecVecdouble_swigregister = _Dag_Slicer.VecVecdouble_swigregister
VecVecdouble_swigregister(VecVecdouble)

class VecInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _Dag_Slicer.VecInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Dag_Slicer.VecInt___nonzero__(self)
    def __bool__(self): return _Dag_Slicer.VecInt___bool__(self)
    def __len__(self): return _Dag_Slicer.VecInt___len__(self)
    def pop(self): return _Dag_Slicer.VecInt_pop(self)
    def __getslice__(self, *args): return _Dag_Slicer.VecInt___getslice__(self, *args)
    def __setslice__(self, *args): return _Dag_Slicer.VecInt___setslice__(self, *args)
    def __delslice__(self, *args): return _Dag_Slicer.VecInt___delslice__(self, *args)
    def __delitem__(self, *args): return _Dag_Slicer.VecInt___delitem__(self, *args)
    def __getitem__(self, *args): return _Dag_Slicer.VecInt___getitem__(self, *args)
    def __setitem__(self, *args): return _Dag_Slicer.VecInt___setitem__(self, *args)
    def append(self, *args): return _Dag_Slicer.VecInt_append(self, *args)
    def empty(self): return _Dag_Slicer.VecInt_empty(self)
    def size(self): return _Dag_Slicer.VecInt_size(self)
    def clear(self): return _Dag_Slicer.VecInt_clear(self)
    def swap(self, *args): return _Dag_Slicer.VecInt_swap(self, *args)
    def get_allocator(self): return _Dag_Slicer.VecInt_get_allocator(self)
    def begin(self): return _Dag_Slicer.VecInt_begin(self)
    def end(self): return _Dag_Slicer.VecInt_end(self)
    def rbegin(self): return _Dag_Slicer.VecInt_rbegin(self)
    def rend(self): return _Dag_Slicer.VecInt_rend(self)
    def pop_back(self): return _Dag_Slicer.VecInt_pop_back(self)
    def erase(self, *args): return _Dag_Slicer.VecInt_erase(self, *args)
    def __init__(self, *args): 
        this = _Dag_Slicer.new_VecInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Dag_Slicer.VecInt_push_back(self, *args)
    def front(self): return _Dag_Slicer.VecInt_front(self)
    def back(self): return _Dag_Slicer.VecInt_back(self)
    def assign(self, *args): return _Dag_Slicer.VecInt_assign(self, *args)
    def resize(self, *args): return _Dag_Slicer.VecInt_resize(self, *args)
    def insert(self, *args): return _Dag_Slicer.VecInt_insert(self, *args)
    def reserve(self, *args): return _Dag_Slicer.VecInt_reserve(self, *args)
    def capacity(self): return _Dag_Slicer.VecInt_capacity(self)
    __swig_destroy__ = _Dag_Slicer.delete_VecInt
    __del__ = lambda self : None;
VecInt_swigregister = _Dag_Slicer.VecInt_swigregister
VecInt_swigregister(VecInt)

class VecVecint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecVecint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecVecint, name)
    __repr__ = _swig_repr
    def iterator(self): return _Dag_Slicer.VecVecint_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Dag_Slicer.VecVecint___nonzero__(self)
    def __bool__(self): return _Dag_Slicer.VecVecint___bool__(self)
    def __len__(self): return _Dag_Slicer.VecVecint___len__(self)
    def pop(self): return _Dag_Slicer.VecVecint_pop(self)
    def __getslice__(self, *args): return _Dag_Slicer.VecVecint___getslice__(self, *args)
    def __setslice__(self, *args): return _Dag_Slicer.VecVecint___setslice__(self, *args)
    def __delslice__(self, *args): return _Dag_Slicer.VecVecint___delslice__(self, *args)
    def __delitem__(self, *args): return _Dag_Slicer.VecVecint___delitem__(self, *args)
    def __getitem__(self, *args): return _Dag_Slicer.VecVecint___getitem__(self, *args)
    def __setitem__(self, *args): return _Dag_Slicer.VecVecint___setitem__(self, *args)
    def append(self, *args): return _Dag_Slicer.VecVecint_append(self, *args)
    def empty(self): return _Dag_Slicer.VecVecint_empty(self)
    def size(self): return _Dag_Slicer.VecVecint_size(self)
    def clear(self): return _Dag_Slicer.VecVecint_clear(self)
    def swap(self, *args): return _Dag_Slicer.VecVecint_swap(self, *args)
    def get_allocator(self): return _Dag_Slicer.VecVecint_get_allocator(self)
    def begin(self): return _Dag_Slicer.VecVecint_begin(self)
    def end(self): return _Dag_Slicer.VecVecint_end(self)
    def rbegin(self): return _Dag_Slicer.VecVecint_rbegin(self)
    def rend(self): return _Dag_Slicer.VecVecint_rend(self)
    def pop_back(self): return _Dag_Slicer.VecVecint_pop_back(self)
    def erase(self, *args): return _Dag_Slicer.VecVecint_erase(self, *args)
    def __init__(self, *args): 
        this = _Dag_Slicer.new_VecVecint(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Dag_Slicer.VecVecint_push_back(self, *args)
    def front(self): return _Dag_Slicer.VecVecint_front(self)
    def back(self): return _Dag_Slicer.VecVecint_back(self)
    def assign(self, *args): return _Dag_Slicer.VecVecint_assign(self, *args)
    def resize(self, *args): return _Dag_Slicer.VecVecint_resize(self, *args)
    def insert(self, *args): return _Dag_Slicer.VecVecint_insert(self, *args)
    def reserve(self, *args): return _Dag_Slicer.VecVecint_reserve(self, *args)
    def capacity(self): return _Dag_Slicer.VecVecint_capacity(self)
    __swig_destroy__ = _Dag_Slicer.delete_VecVecint
    __del__ = lambda self : None;
VecVecint_swigregister = _Dag_Slicer.VecVecint_swigregister
VecVecint_swigregister(VecVecint)

class VecStr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VecStr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VecStr, name)
    __repr__ = _swig_repr
    def iterator(self): return _Dag_Slicer.VecStr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _Dag_Slicer.VecStr___nonzero__(self)
    def __bool__(self): return _Dag_Slicer.VecStr___bool__(self)
    def __len__(self): return _Dag_Slicer.VecStr___len__(self)
    def pop(self): return _Dag_Slicer.VecStr_pop(self)
    def __getslice__(self, *args): return _Dag_Slicer.VecStr___getslice__(self, *args)
    def __setslice__(self, *args): return _Dag_Slicer.VecStr___setslice__(self, *args)
    def __delslice__(self, *args): return _Dag_Slicer.VecStr___delslice__(self, *args)
    def __delitem__(self, *args): return _Dag_Slicer.VecStr___delitem__(self, *args)
    def __getitem__(self, *args): return _Dag_Slicer.VecStr___getitem__(self, *args)
    def __setitem__(self, *args): return _Dag_Slicer.VecStr___setitem__(self, *args)
    def append(self, *args): return _Dag_Slicer.VecStr_append(self, *args)
    def empty(self): return _Dag_Slicer.VecStr_empty(self)
    def size(self): return _Dag_Slicer.VecStr_size(self)
    def clear(self): return _Dag_Slicer.VecStr_clear(self)
    def swap(self, *args): return _Dag_Slicer.VecStr_swap(self, *args)
    def get_allocator(self): return _Dag_Slicer.VecStr_get_allocator(self)
    def begin(self): return _Dag_Slicer.VecStr_begin(self)
    def end(self): return _Dag_Slicer.VecStr_end(self)
    def rbegin(self): return _Dag_Slicer.VecStr_rbegin(self)
    def rend(self): return _Dag_Slicer.VecStr_rend(self)
    def pop_back(self): return _Dag_Slicer.VecStr_pop_back(self)
    def erase(self, *args): return _Dag_Slicer.VecStr_erase(self, *args)
    def __init__(self, *args): 
        this = _Dag_Slicer.new_VecStr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _Dag_Slicer.VecStr_push_back(self, *args)
    def front(self): return _Dag_Slicer.VecStr_front(self)
    def back(self): return _Dag_Slicer.VecStr_back(self)
    def assign(self, *args): return _Dag_Slicer.VecStr_assign(self, *args)
    def resize(self, *args): return _Dag_Slicer.VecStr_resize(self, *args)
    def insert(self, *args): return _Dag_Slicer.VecStr_insert(self, *args)
    def reserve(self, *args): return _Dag_Slicer.VecStr_reserve(self, *args)
    def capacity(self): return _Dag_Slicer.VecStr_capacity(self)
    __swig_destroy__ = _Dag_Slicer.delete_VecStr
    __del__ = lambda self : None;
VecStr_swigregister = _Dag_Slicer.VecStr_swigregister
VecStr_swigregister(VecStr)

class Dag_Slicer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dag_Slicer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dag_Slicer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _Dag_Slicer.new_Dag_Slicer(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _Dag_Slicer.delete_Dag_Slicer
    __del__ = lambda self : None;
    __swig_setmethods__["_axis"] = _Dag_Slicer.Dag_Slicer__axis_set
    __swig_getmethods__["_axis"] = _Dag_Slicer.Dag_Slicer__axis_get
    if _newclass:_axis = _swig_property(_Dag_Slicer.Dag_Slicer__axis_get, _Dag_Slicer.Dag_Slicer__axis_set)
    __swig_setmethods__["_filename"] = _Dag_Slicer.Dag_Slicer__filename_set
    __swig_getmethods__["_filename"] = _Dag_Slicer.Dag_Slicer__filename_get
    if _newclass:_filename = _swig_property(_Dag_Slicer.Dag_Slicer__filename_get, _Dag_Slicer.Dag_Slicer__filename_set)
    __swig_setmethods__["_roam_warning"] = _Dag_Slicer.Dag_Slicer__roam_warning_set
    __swig_getmethods__["_roam_warning"] = _Dag_Slicer.Dag_Slicer__roam_warning_get
    if _newclass:_roam_warning = _swig_property(_Dag_Slicer.Dag_Slicer__roam_warning_get, _Dag_Slicer.Dag_Slicer__roam_warning_set)
    __swig_setmethods__["_coord"] = _Dag_Slicer.Dag_Slicer__coord_set
    __swig_getmethods__["_coord"] = _Dag_Slicer.Dag_Slicer__coord_get
    if _newclass:_coord = _swig_property(_Dag_Slicer.Dag_Slicer__coord_get, _Dag_Slicer.Dag_Slicer__coord_set)
    __swig_setmethods__["_by_group"] = _Dag_Slicer.Dag_Slicer__by_group_set
    __swig_getmethods__["_by_group"] = _Dag_Slicer.Dag_Slicer__by_group_get
    if _newclass:_by_group = _swig_property(_Dag_Slicer.Dag_Slicer__by_group_get, _Dag_Slicer.Dag_Slicer__by_group_set)
    __swig_setmethods__["_verbose"] = _Dag_Slicer.Dag_Slicer__verbose_set
    __swig_getmethods__["_verbose"] = _Dag_Slicer.Dag_Slicer__verbose_get
    if _newclass:_verbose = _swig_property(_Dag_Slicer.Dag_Slicer__verbose_get, _Dag_Slicer.Dag_Slicer__verbose_set)
    def create_slice(self): return _Dag_Slicer.Dag_Slicer_create_slice(self)
    def rename_group(self, *args): return _Dag_Slicer.Dag_Slicer_rename_group(self, *args)
    def write_file(self, *args): return _Dag_Slicer.Dag_Slicer_write_file(self, *args)
    __swig_setmethods__["group_names"] = _Dag_Slicer.Dag_Slicer_group_names_set
    __swig_getmethods__["group_names"] = _Dag_Slicer.Dag_Slicer_group_names_get
    if _newclass:group_names = _swig_property(_Dag_Slicer.Dag_Slicer_group_names_get, _Dag_Slicer.Dag_Slicer_group_names_set)
    __swig_setmethods__["dum_pnts"] = _Dag_Slicer.Dag_Slicer_dum_pnts_set
    __swig_getmethods__["dum_pnts"] = _Dag_Slicer.Dag_Slicer_dum_pnts_get
    if _newclass:dum_pnts = _swig_property(_Dag_Slicer.Dag_Slicer_dum_pnts_get, _Dag_Slicer.Dag_Slicer_dum_pnts_set)
    __swig_setmethods__["slice_x_pnts"] = _Dag_Slicer.Dag_Slicer_slice_x_pnts_set
    __swig_getmethods__["slice_x_pnts"] = _Dag_Slicer.Dag_Slicer_slice_x_pnts_get
    if _newclass:slice_x_pnts = _swig_property(_Dag_Slicer.Dag_Slicer_slice_x_pnts_get, _Dag_Slicer.Dag_Slicer_slice_x_pnts_set)
    __swig_setmethods__["slice_y_pnts"] = _Dag_Slicer.Dag_Slicer_slice_y_pnts_set
    __swig_getmethods__["slice_y_pnts"] = _Dag_Slicer.Dag_Slicer_slice_y_pnts_get
    if _newclass:slice_y_pnts = _swig_property(_Dag_Slicer.Dag_Slicer_slice_y_pnts_get, _Dag_Slicer.Dag_Slicer_slice_y_pnts_set)
    __swig_setmethods__["group_ids"] = _Dag_Slicer.Dag_Slicer_group_ids_set
    __swig_getmethods__["group_ids"] = _Dag_Slicer.Dag_Slicer_group_ids_get
    if _newclass:group_ids = _swig_property(_Dag_Slicer.Dag_Slicer_group_ids_get, _Dag_Slicer.Dag_Slicer_group_ids_set)
    __swig_setmethods__["path_coding"] = _Dag_Slicer.Dag_Slicer_path_coding_set
    __swig_getmethods__["path_coding"] = _Dag_Slicer.Dag_Slicer_path_coding_get
    if _newclass:path_coding = _swig_property(_Dag_Slicer.Dag_Slicer_path_coding_get, _Dag_Slicer.Dag_Slicer_path_coding_set)
    __swig_setmethods__["_debug"] = _Dag_Slicer.Dag_Slicer__debug_set
    __swig_getmethods__["_debug"] = _Dag_Slicer.Dag_Slicer__debug_get
    if _newclass:_debug = _swig_property(_Dag_Slicer.Dag_Slicer__debug_get, _Dag_Slicer.Dag_Slicer__debug_set)
    __swig_setmethods__["_roam"] = _Dag_Slicer.Dag_Slicer__roam_set
    __swig_getmethods__["_roam"] = _Dag_Slicer.Dag_Slicer__roam_get
    if _newclass:_roam = _swig_property(_Dag_Slicer.Dag_Slicer__roam_get, _Dag_Slicer.Dag_Slicer__roam_set)
Dag_Slicer_swigregister = _Dag_Slicer.Dag_Slicer_swigregister
Dag_Slicer_swigregister(Dag_Slicer)

# This file is compatible with both classic and new-style classes.


