###################
###  WARNING!!! ###
###################
# This file has been autogenerated

# Cython imports
from cython.operator cimport dereference as deref
from cython.operator cimport preincrement as inc
from libc.stdlib cimport malloc, free
from libc.string cimport memcpy
from cpython.version cimport PY_MAJOR_VERSION
from cpython.ref cimport PyTypeObject
from cpython.type cimport PyType_Ready
from cpython.object cimport Py_LT, Py_LE, Py_EQ, Py_NE, Py_GT, Py_GE

# Python Imports
import collections

cimport numpy as np
import numpy as np
np.import_array()

cimport xdress_extra_types

# Cython imports for types
cimport numpy as np
from libcpp.vector cimport vector as cpp_vector
from libcpp.string cimport string as std_string

# imports for types
import numpy as np

dtypes = {}

if PY_MAJOR_VERSION >= 3:
    basestring = str

# Dirty ifdef, else, else preprocessor hack
# see http://comments.gmane.org/gmane.comp.python.cython.user/4080
cdef extern from *:
    cdef void emit_ifpy2k "#if PY_MAJOR_VERSION == 2 //" ()
    cdef void emit_ifpy3k "#if PY_MAJOR_VERSION == 3 //" ()
    cdef void emit_else "#else //" ()
    cdef void emit_endif "#endif //" ()

# std_string dtype
cdef MemoryKnight[std_string] mk_str = MemoryKnight[std_string]()
cdef MemoryKnight[PyXDStr_Type] mk_str_type = MemoryKnight[PyXDStr_Type]()

cdef object pyxd_str_getitem(void * data, void * arr):


    pyval = bytes(<char *> (<std_string *> data)[0].c_str()).decode()
    return pyval

cdef int pyxd_str_setitem(object value, void * data, void * arr):
    cdef std_string * new_data
    cdef char * value_proxy
    if isinstance(value, basestring):
        value_bytes = value.encode()
        new_data = mk_str.renew(data)
        new_data[0] = std_string(<char *> value_bytes)
        return 0
    else:
        return -1

cdef void pyxd_str_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):
    cdef np.npy_intp i
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef std_string * new_dest

    if src != NULL:
        if (sstride == sizeof(std_string) and dstride == sizeof(std_string)):
            new_dest = mk_str.renew(dest)
            new_dest[0] = deref(<std_string *> src)
        else:
            a = <char *> dest
            b = <char *> src
            for i in range(n):
                new_dest = mk_str.renew(<void *> a)
                new_dest[0] = deref(<std_string *> b)
                a += dstride
                b += sstride
    if swap: 
        m = sizeof(std_string) / 2
        a = <char *> dest
        for i in range(n, 0, -1):
            b = a + (sizeof(std_string) - 1);
            for j in range(m):
                c = a[0]
                a[0] = b[0]
                a += 1
                b[0] = c
                b -= 1
            a += dstride - m

cdef void pyxd_str_copyswap(void * dest, void * src, int swap, void * arr):
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef std_string * new_dest
    if src != NULL:
        new_dest = mk_str.renew(dest)
        new_dest[0] = (<std_string *> src)[0]
    if swap:
        m = sizeof(std_string) / 2
        a = <char *> dest
        b = a + (sizeof(std_string) - 1);
        for j in range(m):
            c = a[0]
            a[0] = b[0]
            a += 1
            b[0] = c
            b -= 1

cdef np.npy_bool pyxd_str_nonzero(void * data, void * arr):
    return (data != NULL)
    # FIXME comparisons not defined for arbitrary types
    #cdef std_string zero = std_string()
    #return ((<std_string *> data)[0] != zero)

cdef int pyxd_str_compare(const void * d1, const void * d2, void * arr):
    return (d1 == d2) - 1
    # FIXME comparisons not defined for arbitrary types
    #if deref(<std_string *> d1) == deref(<std_string *> d2):
    #    return 0
    #else:
    #    return -1

cdef PyArray_ArrFuncs PyXD_Str_ArrFuncs 
PyArray_InitArrFuncs(&PyXD_Str_ArrFuncs)
PyXD_Str_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_str_getitem)
PyXD_Str_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_str_setitem)
PyXD_Str_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_str_copyswapn)
PyXD_Str_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_str_copyswap)
PyXD_Str_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_str_nonzero)
PyXD_Str_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_str_compare)

cdef object pyxd_str_type_alloc(PyTypeObject * self, Py_ssize_t nitems):
    cdef PyXDStr_Type * cval
    cdef object pyval
    cval = mk_str_type.defnew()
    cval.ob_typ = self
    pyval = <object> cval
    return pyval

cdef void pyxd_str_type_dealloc(object self):
    cdef PyXDStr_Type * cself = <PyXDStr_Type *> self
    mk_str_type.deall(cself)
    return

cdef object pyxd_str_type_new(PyTypeObject * subtype, object args, object kwds):
    return pyxd_str_type_alloc(subtype, 0)

cdef void pyxd_str_type_free(void * self):
    return

cdef object pyxd_str_type_str(object self):
    cdef PyXDStr_Type * cself = <PyXDStr_Type *> self


    pyval = bytes(<char *> (cself.obval).c_str()).decode()
    s = str(pyval)
    return s

cdef object pyxd_str_type_repr(object self):
    cdef PyXDStr_Type * cself = <PyXDStr_Type *> self


    pyval = bytes(<char *> (cself.obval).c_str()).decode()
    s = repr(pyval)
    return s

cdef int pyxd_str_type_compare(object a, object b):
    return (a is b) - 1
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDStr_Type * x
    #cdef PyXDStr_Type * y
    #if type(a) is not type(b):
    #    raise NotImplementedError
    #x = <PyXDStr_Type *> a
    #y = <PyXDStr_Type *> b
    #if (x.obval == y.obval):
    #    return 0
    #elif (x.obval < y.obval):
    #    return -1
    #elif (x.obval > y.obval):
    #    return 1
    #else:
    #    raise NotImplementedError

cdef object pyxd_str_type_richcompare(object a, object b, int op):
    if op == Py_EQ:
        return (a is b)
    elif op == Py_NE:
        return (a is not b)
    else:
        return NotImplemented
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDStr_Type * x
    #cdef PyXDStr_Type * y
    #if type(a) is not type(b):
    #    return NotImplemented
    #x = <PyXDStr_Type *> a
    #y = <PyXDStr_Type *> b
    #if op == Py_LT:
    #    return (x.obval < y.obval)
    #elif op == Py_LE:
    #    return (x.obval <= y.obval)
    #elif op == Py_EQ:
    #    return (x.obval == y.obval)
    #elif op == Py_NE:
    #    return (x.obval != y.obval)
    #elif op == Py_GT:
    #    return (x.obval > y.obval)
    #elif op == Py_GE:
    #    return (x.obval >= y.obval)
    #else:
    #    return NotImplemented    

cdef long pyxd_str_type_hash(object self):
    return id(self)

cdef PyMemberDef pyxd_str_type_members[1]
pyxd_str_type_members[0] = PyMemberDef(NULL, 0, 0, 0, NULL)

cdef PyGetSetDef pyxd_str_type_getset[1]
pyxd_str_type_getset[0] = PyGetSetDef(NULL, NULL, NULL, NULL, NULL)

cdef bint pyxd_str_is_ready
cdef type PyXD_Str = type("xd_str", ((<object> PyArray_API[10]),), {})
pyxd_str_is_ready = PyType_Ready(<object> PyXD_Str)
(<PyTypeObject *> PyXD_Str).tp_basicsize = sizeof(PyXDStr_Type)
(<PyTypeObject *> PyXD_Str).tp_itemsize = 0
(<PyTypeObject *> PyXD_Str).tp_doc = "Python scalar type for std_string"
(<PyTypeObject *> PyXD_Str).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
(<PyTypeObject *> PyXD_Str).tp_alloc = pyxd_str_type_alloc
(<PyTypeObject *> PyXD_Str).tp_dealloc = pyxd_str_type_dealloc
(<PyTypeObject *> PyXD_Str).tp_new = pyxd_str_type_new
(<PyTypeObject *> PyXD_Str).tp_free = pyxd_str_type_free
(<PyTypeObject *> PyXD_Str).tp_str = pyxd_str_type_str
(<PyTypeObject *> PyXD_Str).tp_repr = pyxd_str_type_repr
(<PyTypeObject *> PyXD_Str).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
(<PyTypeObject *> PyXD_Str).tp_hash = pyxd_str_type_hash
emit_ifpy2k()
(<PyTypeObject *> PyXD_Str).tp_compare = &pyxd_str_type_compare
emit_endif()
(<PyTypeObject *> PyXD_Str).tp_richcompare = pyxd_str_type_richcompare
(<PyTypeObject *> PyXD_Str).tp_members = pyxd_str_type_members
(<PyTypeObject *> PyXD_Str).tp_getset = pyxd_str_type_getset
pyxd_str_is_ready = PyType_Ready(<object> PyXD_Str)
Py_INCREF(PyXD_Str)
XDStr = PyXD_Str

cdef PyArray_Descr * c_xd_str_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
(<PyObject *> c_xd_str_descr).ob_refcnt = 0 # ob_refcnt
(<PyObject *> c_xd_str_descr).ob_type = <PyTypeObject *> PyArray_API[3]
c_xd_str_descr.typeobj = <PyTypeObject *> PyXD_Str # typeobj
c_xd_str_descr.kind = 'x'  # kind, for xdress
c_xd_str_descr.type = 'x'  # type
c_xd_str_descr.byteorder = '='  # byteorder
c_xd_str_descr.flags = NPY_USE_GETITEM  # flags
c_xd_str_descr.type_num = 0    # type_num, assigned at registration
c_xd_str_descr.elsize = sizeof(std_string)  # elsize, 
c_xd_str_descr.alignment = 8  # alignment
c_xd_str_descr.subarray = NULL  # subarray
c_xd_str_descr.fields = NULL  # fields
c_xd_str_descr.names = NULL
(<PyArray_Descr *> c_xd_str_descr).f = <PyArray_ArrFuncs *> &PyXD_Str_ArrFuncs  # f == PyArray_ArrFuncs

cdef object xd_str_descr = <object> (<void *> c_xd_str_descr)
Py_INCREF(<object> xd_str_descr)
xd_str = xd_str_descr
cdef int xd_str_num = PyArray_RegisterDataType(c_xd_str_descr)
dtypes['str'] = xd_str
dtypes['xd_str'] = xd_str
dtypes[xd_str_num] = xd_str



# int dtype
cdef MemoryKnight[int] mk_int = MemoryKnight[int]()
cdef MemoryKnight[PyXDInt_Type] mk_int_type = MemoryKnight[PyXDInt_Type]()

cdef object pyxd_int_getitem(void * data, void * arr):


    pyval = int((<int *> data)[0])
    return pyval

cdef int pyxd_int_setitem(object value, void * data, void * arr):
    cdef int * new_data

    if isinstance(value, int):

        new_data = mk_int.renew(data)
        new_data[0] = <int> value
        return 0
    else:
        return -1

cdef void pyxd_int_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):
    cdef np.npy_intp i
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef int * new_dest

    if src != NULL:
        if (sstride == sizeof(int) and dstride == sizeof(int)):
            new_dest = mk_int.renew(dest)
            new_dest[0] = deref(<int *> src)
        else:
            a = <char *> dest
            b = <char *> src
            for i in range(n):
                new_dest = mk_int.renew(<void *> a)
                new_dest[0] = deref(<int *> b)
                a += dstride
                b += sstride
    if swap: 
        m = sizeof(int) / 2
        a = <char *> dest
        for i in range(n, 0, -1):
            b = a + (sizeof(int) - 1);
            for j in range(m):
                c = a[0]
                a[0] = b[0]
                a += 1
                b[0] = c
                b -= 1
            a += dstride - m

cdef void pyxd_int_copyswap(void * dest, void * src, int swap, void * arr):
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef int * new_dest
    if src != NULL:
        new_dest = mk_int.renew(dest)
        new_dest[0] = (<int *> src)[0]
    if swap:
        m = sizeof(int) / 2
        a = <char *> dest
        b = a + (sizeof(int) - 1);
        for j in range(m):
            c = a[0]
            a[0] = b[0]
            a += 1
            b[0] = c
            b -= 1

cdef np.npy_bool pyxd_int_nonzero(void * data, void * arr):
    return (data != NULL)
    # FIXME comparisons not defined for arbitrary types
    #cdef int zero = int()
    #return ((<int *> data)[0] != zero)

cdef int pyxd_int_compare(const void * d1, const void * d2, void * arr):
    return (d1 == d2) - 1
    # FIXME comparisons not defined for arbitrary types
    #if deref(<int *> d1) == deref(<int *> d2):
    #    return 0
    #else:
    #    return -1

cdef PyArray_ArrFuncs PyXD_Int_ArrFuncs 
PyArray_InitArrFuncs(&PyXD_Int_ArrFuncs)
PyXD_Int_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_int_getitem)
PyXD_Int_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_int_setitem)
PyXD_Int_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_int_copyswapn)
PyXD_Int_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_int_copyswap)
PyXD_Int_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_int_nonzero)
PyXD_Int_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_int_compare)

cdef object pyxd_int_type_alloc(PyTypeObject * self, Py_ssize_t nitems):
    cdef PyXDInt_Type * cval
    cdef object pyval
    cval = mk_int_type.defnew()
    cval.ob_typ = self
    pyval = <object> cval
    return pyval

cdef void pyxd_int_type_dealloc(object self):
    cdef PyXDInt_Type * cself = <PyXDInt_Type *> self
    mk_int_type.deall(cself)
    return

cdef object pyxd_int_type_new(PyTypeObject * subtype, object args, object kwds):
    return pyxd_int_type_alloc(subtype, 0)

cdef void pyxd_int_type_free(void * self):
    return

cdef object pyxd_int_type_str(object self):
    cdef PyXDInt_Type * cself = <PyXDInt_Type *> self


    pyval = int((cself.obval))
    s = str(pyval)
    return s

cdef object pyxd_int_type_repr(object self):
    cdef PyXDInt_Type * cself = <PyXDInt_Type *> self


    pyval = int((cself.obval))
    s = repr(pyval)
    return s

cdef int pyxd_int_type_compare(object a, object b):
    return (a is b) - 1
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDInt_Type * x
    #cdef PyXDInt_Type * y
    #if type(a) is not type(b):
    #    raise NotImplementedError
    #x = <PyXDInt_Type *> a
    #y = <PyXDInt_Type *> b
    #if (x.obval == y.obval):
    #    return 0
    #elif (x.obval < y.obval):
    #    return -1
    #elif (x.obval > y.obval):
    #    return 1
    #else:
    #    raise NotImplementedError

cdef object pyxd_int_type_richcompare(object a, object b, int op):
    if op == Py_EQ:
        return (a is b)
    elif op == Py_NE:
        return (a is not b)
    else:
        return NotImplemented
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDInt_Type * x
    #cdef PyXDInt_Type * y
    #if type(a) is not type(b):
    #    return NotImplemented
    #x = <PyXDInt_Type *> a
    #y = <PyXDInt_Type *> b
    #if op == Py_LT:
    #    return (x.obval < y.obval)
    #elif op == Py_LE:
    #    return (x.obval <= y.obval)
    #elif op == Py_EQ:
    #    return (x.obval == y.obval)
    #elif op == Py_NE:
    #    return (x.obval != y.obval)
    #elif op == Py_GT:
    #    return (x.obval > y.obval)
    #elif op == Py_GE:
    #    return (x.obval >= y.obval)
    #else:
    #    return NotImplemented    

cdef long pyxd_int_type_hash(object self):
    return id(self)

cdef PyMemberDef pyxd_int_type_members[1]
pyxd_int_type_members[0] = PyMemberDef(NULL, 0, 0, 0, NULL)

cdef PyGetSetDef pyxd_int_type_getset[1]
pyxd_int_type_getset[0] = PyGetSetDef(NULL, NULL, NULL, NULL, NULL)

cdef bint pyxd_int_is_ready
cdef type PyXD_Int = type("xd_int", ((<object> PyArray_API[10]),), {})
pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
(<PyTypeObject *> PyXD_Int).tp_basicsize = sizeof(PyXDInt_Type)
(<PyTypeObject *> PyXD_Int).tp_itemsize = 0
(<PyTypeObject *> PyXD_Int).tp_doc = "Python scalar type for int"
(<PyTypeObject *> PyXD_Int).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
(<PyTypeObject *> PyXD_Int).tp_alloc = pyxd_int_type_alloc
(<PyTypeObject *> PyXD_Int).tp_dealloc = pyxd_int_type_dealloc
(<PyTypeObject *> PyXD_Int).tp_new = pyxd_int_type_new
(<PyTypeObject *> PyXD_Int).tp_free = pyxd_int_type_free
(<PyTypeObject *> PyXD_Int).tp_str = pyxd_int_type_str
(<PyTypeObject *> PyXD_Int).tp_repr = pyxd_int_type_repr
(<PyTypeObject *> PyXD_Int).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
(<PyTypeObject *> PyXD_Int).tp_hash = pyxd_int_type_hash
emit_ifpy2k()
(<PyTypeObject *> PyXD_Int).tp_compare = &pyxd_int_type_compare
emit_endif()
(<PyTypeObject *> PyXD_Int).tp_richcompare = pyxd_int_type_richcompare
(<PyTypeObject *> PyXD_Int).tp_members = pyxd_int_type_members
(<PyTypeObject *> PyXD_Int).tp_getset = pyxd_int_type_getset
pyxd_int_is_ready = PyType_Ready(<object> PyXD_Int)
Py_INCREF(PyXD_Int)
XDInt = PyXD_Int

cdef PyArray_Descr * c_xd_int_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
(<PyObject *> c_xd_int_descr).ob_refcnt = 0 # ob_refcnt
(<PyObject *> c_xd_int_descr).ob_type = <PyTypeObject *> PyArray_API[3]
c_xd_int_descr.typeobj = <PyTypeObject *> PyXD_Int # typeobj
c_xd_int_descr.kind = 'x'  # kind, for xdress
c_xd_int_descr.type = 'x'  # type
c_xd_int_descr.byteorder = '='  # byteorder
c_xd_int_descr.flags = NPY_USE_GETITEM  # flags
c_xd_int_descr.type_num = 0    # type_num, assigned at registration
c_xd_int_descr.elsize = sizeof(int)  # elsize, 
c_xd_int_descr.alignment = 8  # alignment
c_xd_int_descr.subarray = NULL  # subarray
c_xd_int_descr.fields = NULL  # fields
c_xd_int_descr.names = NULL
(<PyArray_Descr *> c_xd_int_descr).f = <PyArray_ArrFuncs *> &PyXD_Int_ArrFuncs  # f == PyArray_ArrFuncs

cdef object xd_int_descr = <object> (<void *> c_xd_int_descr)
Py_INCREF(<object> xd_int_descr)
xd_int = xd_int_descr
cdef int xd_int_num = PyArray_RegisterDataType(c_xd_int_descr)
dtypes['int'] = xd_int
dtypes['xd_int'] = xd_int
dtypes[xd_int_num] = xd_int



# cpp_vector[int] dtype
cdef MemoryKnight[cpp_vector[int]] mk_vector_int = MemoryKnight[cpp_vector[int]]()
cdef MemoryKnight[PyXDVectorInt_Type] mk_vector_int_type = MemoryKnight[PyXDVectorInt_Type]()

cdef object pyxd_vector_int_getitem(void * data, void * arr):
    cdef np.ndarray data_proxy
    cdef np.npy_intp data_proxy_shape[1]
    data_proxy_shape[0] = <np.npy_intp> (<cpp_vector[int] *> data)[0].size()
    data_proxy = np.PyArray_SimpleNewFromData(1, data_proxy_shape, np.NPY_INT32, &(<cpp_vector[int] *> data)[0][0])
    pyval = data_proxy
    return pyval

cdef int pyxd_vector_int_setitem(object value, void * data, void * arr):
    cdef cpp_vector[int] * new_data
    cdef cpp_vector[int] value_proxy
    cdef int ivalue
    cdef int value_size
    cdef int * value_data
    if isinstance(value, list) or isinstance(value, tuple) or isinstance(value, np.ndarray):
        # value is a ('vector', 'int32', 0)
        value_size = len(value)
        if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == xd_vector_int.num:
            value_data = <int *> np.PyArray_DATA(<np.ndarray> value)
            value_proxy = cpp_vector[int](<size_t> value_size)
            for ivalue in range(value_size):
                value_proxy[ivalue] = value_data[ivalue]
        else:
            value_proxy = cpp_vector[int](<size_t> value_size)
            for ivalue in range(value_size):
                value_proxy[ivalue] = <int> value[ivalue]
        new_data = mk_vector_int.renew(data)
        new_data[0] = value_proxy
        return 0
    else:
        return -1

cdef void pyxd_vector_int_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):
    cdef np.npy_intp i
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef cpp_vector[int] * new_dest

    if src != NULL:
        if (sstride == sizeof(cpp_vector[int]) and dstride == sizeof(cpp_vector[int])):
            new_dest = mk_vector_int.renew(dest)
            new_dest[0] = deref(<cpp_vector[int] *> src)
        else:
            a = <char *> dest
            b = <char *> src
            for i in range(n):
                new_dest = mk_vector_int.renew(<void *> a)
                new_dest[0] = deref(<cpp_vector[int] *> b)
                a += dstride
                b += sstride
    if swap: 
        m = sizeof(cpp_vector[int]) / 2
        a = <char *> dest
        for i in range(n, 0, -1):
            b = a + (sizeof(cpp_vector[int]) - 1);
            for j in range(m):
                c = a[0]
                a[0] = b[0]
                a += 1
                b[0] = c
                b -= 1
            a += dstride - m

cdef void pyxd_vector_int_copyswap(void * dest, void * src, int swap, void * arr):
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef cpp_vector[int] * new_dest
    if src != NULL:
        new_dest = mk_vector_int.renew(dest)
        new_dest[0] = (<cpp_vector[int] *> src)[0]
    if swap:
        m = sizeof(cpp_vector[int]) / 2
        a = <char *> dest
        b = a + (sizeof(cpp_vector[int]) - 1);
        for j in range(m):
            c = a[0]
            a[0] = b[0]
            a += 1
            b[0] = c
            b -= 1

cdef np.npy_bool pyxd_vector_int_nonzero(void * data, void * arr):
    return (data != NULL)
    # FIXME comparisons not defined for arbitrary types
    #cdef cpp_vector[int] zero = cpp_vector[int]()
    #return ((<cpp_vector[int] *> data)[0] != zero)

cdef int pyxd_vector_int_compare(const void * d1, const void * d2, void * arr):
    return (d1 == d2) - 1
    # FIXME comparisons not defined for arbitrary types
    #if deref(<cpp_vector[int] *> d1) == deref(<cpp_vector[int] *> d2):
    #    return 0
    #else:
    #    return -1

cdef PyArray_ArrFuncs PyXD_VectorInt_ArrFuncs 
PyArray_InitArrFuncs(&PyXD_VectorInt_ArrFuncs)
PyXD_VectorInt_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_vector_int_getitem)
PyXD_VectorInt_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_vector_int_setitem)
PyXD_VectorInt_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_vector_int_copyswapn)
PyXD_VectorInt_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_vector_int_copyswap)
PyXD_VectorInt_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_vector_int_nonzero)
PyXD_VectorInt_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_vector_int_compare)

cdef object pyxd_vector_int_type_alloc(PyTypeObject * self, Py_ssize_t nitems):
    cdef PyXDVectorInt_Type * cval
    cdef object pyval
    cval = mk_vector_int_type.defnew()
    cval.ob_typ = self
    pyval = <object> cval
    return pyval

cdef void pyxd_vector_int_type_dealloc(object self):
    cdef PyXDVectorInt_Type * cself = <PyXDVectorInt_Type *> self
    mk_vector_int_type.deall(cself)
    return

cdef object pyxd_vector_int_type_new(PyTypeObject * subtype, object args, object kwds):
    return pyxd_vector_int_type_alloc(subtype, 0)

cdef void pyxd_vector_int_type_free(void * self):
    return

cdef object pyxd_vector_int_type_str(object self):
    cdef PyXDVectorInt_Type * cself = <PyXDVectorInt_Type *> self
    cdef np.ndarray val_proxy
    cdef np.npy_intp val_proxy_shape[1]
    val_proxy_shape[0] = <np.npy_intp> (cself.obval).size()
    val_proxy = np.PyArray_SimpleNewFromData(1, val_proxy_shape, np.NPY_INT32, &(cself.obval)[0])
    pyval = val_proxy
    s = str(pyval)
    return s

cdef object pyxd_vector_int_type_repr(object self):
    cdef PyXDVectorInt_Type * cself = <PyXDVectorInt_Type *> self
    cdef np.ndarray val_proxy
    cdef np.npy_intp val_proxy_shape[1]
    val_proxy_shape[0] = <np.npy_intp> (cself.obval).size()
    val_proxy = np.PyArray_SimpleNewFromData(1, val_proxy_shape, np.NPY_INT32, &(cself.obval)[0])
    pyval = val_proxy
    s = repr(pyval)
    return s

cdef int pyxd_vector_int_type_compare(object a, object b):
    return (a is b) - 1
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDVectorInt_Type * x
    #cdef PyXDVectorInt_Type * y
    #if type(a) is not type(b):
    #    raise NotImplementedError
    #x = <PyXDVectorInt_Type *> a
    #y = <PyXDVectorInt_Type *> b
    #if (x.obval == y.obval):
    #    return 0
    #elif (x.obval < y.obval):
    #    return -1
    #elif (x.obval > y.obval):
    #    return 1
    #else:
    #    raise NotImplementedError

cdef object pyxd_vector_int_type_richcompare(object a, object b, int op):
    if op == Py_EQ:
        return (a is b)
    elif op == Py_NE:
        return (a is not b)
    else:
        return NotImplemented
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDVectorInt_Type * x
    #cdef PyXDVectorInt_Type * y
    #if type(a) is not type(b):
    #    return NotImplemented
    #x = <PyXDVectorInt_Type *> a
    #y = <PyXDVectorInt_Type *> b
    #if op == Py_LT:
    #    return (x.obval < y.obval)
    #elif op == Py_LE:
    #    return (x.obval <= y.obval)
    #elif op == Py_EQ:
    #    return (x.obval == y.obval)
    #elif op == Py_NE:
    #    return (x.obval != y.obval)
    #elif op == Py_GT:
    #    return (x.obval > y.obval)
    #elif op == Py_GE:
    #    return (x.obval >= y.obval)
    #else:
    #    return NotImplemented    

cdef long pyxd_vector_int_type_hash(object self):
    return id(self)

cdef PyMemberDef pyxd_vector_int_type_members[1]
pyxd_vector_int_type_members[0] = PyMemberDef(NULL, 0, 0, 0, NULL)

cdef PyGetSetDef pyxd_vector_int_type_getset[1]
pyxd_vector_int_type_getset[0] = PyGetSetDef(NULL, NULL, NULL, NULL, NULL)

cdef bint pyxd_vector_int_is_ready
cdef type PyXD_VectorInt = type("xd_vector_int", ((<object> PyArray_API[10]),), {})
pyxd_vector_int_is_ready = PyType_Ready(<object> PyXD_VectorInt)
(<PyTypeObject *> PyXD_VectorInt).tp_basicsize = sizeof(PyXDVectorInt_Type)
(<PyTypeObject *> PyXD_VectorInt).tp_itemsize = 0
(<PyTypeObject *> PyXD_VectorInt).tp_doc = "Python scalar type for cpp_vector[int]"
(<PyTypeObject *> PyXD_VectorInt).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
(<PyTypeObject *> PyXD_VectorInt).tp_alloc = pyxd_vector_int_type_alloc
(<PyTypeObject *> PyXD_VectorInt).tp_dealloc = pyxd_vector_int_type_dealloc
(<PyTypeObject *> PyXD_VectorInt).tp_new = pyxd_vector_int_type_new
(<PyTypeObject *> PyXD_VectorInt).tp_free = pyxd_vector_int_type_free
(<PyTypeObject *> PyXD_VectorInt).tp_str = pyxd_vector_int_type_str
(<PyTypeObject *> PyXD_VectorInt).tp_repr = pyxd_vector_int_type_repr
(<PyTypeObject *> PyXD_VectorInt).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
(<PyTypeObject *> PyXD_VectorInt).tp_hash = pyxd_vector_int_type_hash
emit_ifpy2k()
(<PyTypeObject *> PyXD_VectorInt).tp_compare = &pyxd_vector_int_type_compare
emit_endif()
(<PyTypeObject *> PyXD_VectorInt).tp_richcompare = pyxd_vector_int_type_richcompare
(<PyTypeObject *> PyXD_VectorInt).tp_members = pyxd_vector_int_type_members
(<PyTypeObject *> PyXD_VectorInt).tp_getset = pyxd_vector_int_type_getset
pyxd_vector_int_is_ready = PyType_Ready(<object> PyXD_VectorInt)
Py_INCREF(PyXD_VectorInt)
XDVectorInt = PyXD_VectorInt

cdef PyArray_Descr * c_xd_vector_int_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
(<PyObject *> c_xd_vector_int_descr).ob_refcnt = 0 # ob_refcnt
(<PyObject *> c_xd_vector_int_descr).ob_type = <PyTypeObject *> PyArray_API[3]
c_xd_vector_int_descr.typeobj = <PyTypeObject *> PyXD_VectorInt # typeobj
c_xd_vector_int_descr.kind = 'x'  # kind, for xdress
c_xd_vector_int_descr.type = 'x'  # type
c_xd_vector_int_descr.byteorder = '='  # byteorder
c_xd_vector_int_descr.flags = NPY_USE_GETITEM  # flags
c_xd_vector_int_descr.type_num = 0    # type_num, assigned at registration
c_xd_vector_int_descr.elsize = sizeof(cpp_vector[int])  # elsize, 
c_xd_vector_int_descr.alignment = 8  # alignment
c_xd_vector_int_descr.subarray = NULL  # subarray
c_xd_vector_int_descr.fields = NULL  # fields
c_xd_vector_int_descr.names = NULL
(<PyArray_Descr *> c_xd_vector_int_descr).f = <PyArray_ArrFuncs *> &PyXD_VectorInt_ArrFuncs  # f == PyArray_ArrFuncs

cdef object xd_vector_int_descr = <object> (<void *> c_xd_vector_int_descr)
Py_INCREF(<object> xd_vector_int_descr)
xd_vector_int = xd_vector_int_descr
cdef int xd_vector_int_num = PyArray_RegisterDataType(c_xd_vector_int_descr)
dtypes['vector_int'] = xd_vector_int
dtypes['xd_vector_int'] = xd_vector_int
dtypes[xd_vector_int_num] = xd_vector_int



# double dtype
cdef MemoryKnight[double] mk_double = MemoryKnight[double]()
cdef MemoryKnight[PyXDDouble_Type] mk_double_type = MemoryKnight[PyXDDouble_Type]()

cdef object pyxd_double_getitem(void * data, void * arr):


    pyval = float((<double *> data)[0])
    return pyval

cdef int pyxd_double_setitem(object value, void * data, void * arr):
    cdef double * new_data

    if isinstance(value, float) or isinstance(value, int):

        new_data = mk_double.renew(data)
        new_data[0] = <double> value
        return 0
    else:
        return -1

cdef void pyxd_double_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):
    cdef np.npy_intp i
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef double * new_dest

    if src != NULL:
        if (sstride == sizeof(double) and dstride == sizeof(double)):
            new_dest = mk_double.renew(dest)
            new_dest[0] = deref(<double *> src)
        else:
            a = <char *> dest
            b = <char *> src
            for i in range(n):
                new_dest = mk_double.renew(<void *> a)
                new_dest[0] = deref(<double *> b)
                a += dstride
                b += sstride
    if swap: 
        m = sizeof(double) / 2
        a = <char *> dest
        for i in range(n, 0, -1):
            b = a + (sizeof(double) - 1);
            for j in range(m):
                c = a[0]
                a[0] = b[0]
                a += 1
                b[0] = c
                b -= 1
            a += dstride - m

cdef void pyxd_double_copyswap(void * dest, void * src, int swap, void * arr):
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef double * new_dest
    if src != NULL:
        new_dest = mk_double.renew(dest)
        new_dest[0] = (<double *> src)[0]
    if swap:
        m = sizeof(double) / 2
        a = <char *> dest
        b = a + (sizeof(double) - 1);
        for j in range(m):
            c = a[0]
            a[0] = b[0]
            a += 1
            b[0] = c
            b -= 1

cdef np.npy_bool pyxd_double_nonzero(void * data, void * arr):
    return (data != NULL)
    # FIXME comparisons not defined for arbitrary types
    #cdef double zero = double()
    #return ((<double *> data)[0] != zero)

cdef int pyxd_double_compare(const void * d1, const void * d2, void * arr):
    return (d1 == d2) - 1
    # FIXME comparisons not defined for arbitrary types
    #if deref(<double *> d1) == deref(<double *> d2):
    #    return 0
    #else:
    #    return -1

cdef PyArray_ArrFuncs PyXD_Double_ArrFuncs 
PyArray_InitArrFuncs(&PyXD_Double_ArrFuncs)
PyXD_Double_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_double_getitem)
PyXD_Double_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_double_setitem)
PyXD_Double_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_double_copyswapn)
PyXD_Double_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_double_copyswap)
PyXD_Double_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_double_nonzero)
PyXD_Double_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_double_compare)

cdef object pyxd_double_type_alloc(PyTypeObject * self, Py_ssize_t nitems):
    cdef PyXDDouble_Type * cval
    cdef object pyval
    cval = mk_double_type.defnew()
    cval.ob_typ = self
    pyval = <object> cval
    return pyval

cdef void pyxd_double_type_dealloc(object self):
    cdef PyXDDouble_Type * cself = <PyXDDouble_Type *> self
    mk_double_type.deall(cself)
    return

cdef object pyxd_double_type_new(PyTypeObject * subtype, object args, object kwds):
    return pyxd_double_type_alloc(subtype, 0)

cdef void pyxd_double_type_free(void * self):
    return

cdef object pyxd_double_type_str(object self):
    cdef PyXDDouble_Type * cself = <PyXDDouble_Type *> self


    pyval = float((cself.obval))
    s = str(pyval)
    return s

cdef object pyxd_double_type_repr(object self):
    cdef PyXDDouble_Type * cself = <PyXDDouble_Type *> self


    pyval = float((cself.obval))
    s = repr(pyval)
    return s

cdef int pyxd_double_type_compare(object a, object b):
    return (a is b) - 1
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDDouble_Type * x
    #cdef PyXDDouble_Type * y
    #if type(a) is not type(b):
    #    raise NotImplementedError
    #x = <PyXDDouble_Type *> a
    #y = <PyXDDouble_Type *> b
    #if (x.obval == y.obval):
    #    return 0
    #elif (x.obval < y.obval):
    #    return -1
    #elif (x.obval > y.obval):
    #    return 1
    #else:
    #    raise NotImplementedError

cdef object pyxd_double_type_richcompare(object a, object b, int op):
    if op == Py_EQ:
        return (a is b)
    elif op == Py_NE:
        return (a is not b)
    else:
        return NotImplemented
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDDouble_Type * x
    #cdef PyXDDouble_Type * y
    #if type(a) is not type(b):
    #    return NotImplemented
    #x = <PyXDDouble_Type *> a
    #y = <PyXDDouble_Type *> b
    #if op == Py_LT:
    #    return (x.obval < y.obval)
    #elif op == Py_LE:
    #    return (x.obval <= y.obval)
    #elif op == Py_EQ:
    #    return (x.obval == y.obval)
    #elif op == Py_NE:
    #    return (x.obval != y.obval)
    #elif op == Py_GT:
    #    return (x.obval > y.obval)
    #elif op == Py_GE:
    #    return (x.obval >= y.obval)
    #else:
    #    return NotImplemented    

cdef long pyxd_double_type_hash(object self):
    return id(self)

cdef PyMemberDef pyxd_double_type_members[1]
pyxd_double_type_members[0] = PyMemberDef(NULL, 0, 0, 0, NULL)

cdef PyGetSetDef pyxd_double_type_getset[1]
pyxd_double_type_getset[0] = PyGetSetDef(NULL, NULL, NULL, NULL, NULL)

cdef bint pyxd_double_is_ready
cdef type PyXD_Double = type("xd_double", ((<object> PyArray_API[10]),), {})
pyxd_double_is_ready = PyType_Ready(<object> PyXD_Double)
(<PyTypeObject *> PyXD_Double).tp_basicsize = sizeof(PyXDDouble_Type)
(<PyTypeObject *> PyXD_Double).tp_itemsize = 0
(<PyTypeObject *> PyXD_Double).tp_doc = "Python scalar type for double"
(<PyTypeObject *> PyXD_Double).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
(<PyTypeObject *> PyXD_Double).tp_alloc = pyxd_double_type_alloc
(<PyTypeObject *> PyXD_Double).tp_dealloc = pyxd_double_type_dealloc
(<PyTypeObject *> PyXD_Double).tp_new = pyxd_double_type_new
(<PyTypeObject *> PyXD_Double).tp_free = pyxd_double_type_free
(<PyTypeObject *> PyXD_Double).tp_str = pyxd_double_type_str
(<PyTypeObject *> PyXD_Double).tp_repr = pyxd_double_type_repr
(<PyTypeObject *> PyXD_Double).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
(<PyTypeObject *> PyXD_Double).tp_hash = pyxd_double_type_hash
emit_ifpy2k()
(<PyTypeObject *> PyXD_Double).tp_compare = &pyxd_double_type_compare
emit_endif()
(<PyTypeObject *> PyXD_Double).tp_richcompare = pyxd_double_type_richcompare
(<PyTypeObject *> PyXD_Double).tp_members = pyxd_double_type_members
(<PyTypeObject *> PyXD_Double).tp_getset = pyxd_double_type_getset
pyxd_double_is_ready = PyType_Ready(<object> PyXD_Double)
Py_INCREF(PyXD_Double)
XDDouble = PyXD_Double

cdef PyArray_Descr * c_xd_double_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
(<PyObject *> c_xd_double_descr).ob_refcnt = 0 # ob_refcnt
(<PyObject *> c_xd_double_descr).ob_type = <PyTypeObject *> PyArray_API[3]
c_xd_double_descr.typeobj = <PyTypeObject *> PyXD_Double # typeobj
c_xd_double_descr.kind = 'x'  # kind, for xdress
c_xd_double_descr.type = 'x'  # type
c_xd_double_descr.byteorder = '='  # byteorder
c_xd_double_descr.flags = NPY_USE_GETITEM  # flags
c_xd_double_descr.type_num = 0    # type_num, assigned at registration
c_xd_double_descr.elsize = sizeof(double)  # elsize, 
c_xd_double_descr.alignment = 8  # alignment
c_xd_double_descr.subarray = NULL  # subarray
c_xd_double_descr.fields = NULL  # fields
c_xd_double_descr.names = NULL
(<PyArray_Descr *> c_xd_double_descr).f = <PyArray_ArrFuncs *> &PyXD_Double_ArrFuncs  # f == PyArray_ArrFuncs

cdef object xd_double_descr = <object> (<void *> c_xd_double_descr)
Py_INCREF(<object> xd_double_descr)
xd_double = xd_double_descr
cdef int xd_double_num = PyArray_RegisterDataType(c_xd_double_descr)
dtypes['double'] = xd_double
dtypes['xd_double'] = xd_double
dtypes[xd_double_num] = xd_double



# cpp_vector[double] dtype
cdef MemoryKnight[cpp_vector[double]] mk_vector_double = MemoryKnight[cpp_vector[double]]()
cdef MemoryKnight[PyXDVectorDouble_Type] mk_vector_double_type = MemoryKnight[PyXDVectorDouble_Type]()

cdef object pyxd_vector_double_getitem(void * data, void * arr):
    cdef np.ndarray data_proxy
    cdef np.npy_intp data_proxy_shape[1]
    data_proxy_shape[0] = <np.npy_intp> (<cpp_vector[double] *> data)[0].size()
    data_proxy = np.PyArray_SimpleNewFromData(1, data_proxy_shape, np.NPY_FLOAT64, &(<cpp_vector[double] *> data)[0][0])
    pyval = data_proxy
    return pyval

cdef int pyxd_vector_double_setitem(object value, void * data, void * arr):
    cdef cpp_vector[double] * new_data
    cdef cpp_vector[double] value_proxy
    cdef int ivalue
    cdef int value_size
    cdef double * value_data
    if isinstance(value, list) or isinstance(value, tuple) or isinstance(value, np.ndarray):
        # value is a ('vector', 'float64', 0)
        value_size = len(value)
        if isinstance(value, np.ndarray) and (<np.ndarray> value).descr.type_num == xd_vector_double.num:
            value_data = <double *> np.PyArray_DATA(<np.ndarray> value)
            value_proxy = cpp_vector[double](<size_t> value_size)
            for ivalue in range(value_size):
                value_proxy[ivalue] = value_data[ivalue]
        else:
            value_proxy = cpp_vector[double](<size_t> value_size)
            for ivalue in range(value_size):
                value_proxy[ivalue] = <double> value[ivalue]
        new_data = mk_vector_double.renew(data)
        new_data[0] = value_proxy
        return 0
    else:
        return -1

cdef void pyxd_vector_double_copyswapn(void * dest, np.npy_intp dstride, void * src, np.npy_intp sstride, np.npy_intp n, int swap, void * arr):
    cdef np.npy_intp i
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef cpp_vector[double] * new_dest

    if src != NULL:
        if (sstride == sizeof(cpp_vector[double]) and dstride == sizeof(cpp_vector[double])):
            new_dest = mk_vector_double.renew(dest)
            new_dest[0] = deref(<cpp_vector[double] *> src)
        else:
            a = <char *> dest
            b = <char *> src
            for i in range(n):
                new_dest = mk_vector_double.renew(<void *> a)
                new_dest[0] = deref(<cpp_vector[double] *> b)
                a += dstride
                b += sstride
    if swap: 
        m = sizeof(cpp_vector[double]) / 2
        a = <char *> dest
        for i in range(n, 0, -1):
            b = a + (sizeof(cpp_vector[double]) - 1);
            for j in range(m):
                c = a[0]
                a[0] = b[0]
                a += 1
                b[0] = c
                b -= 1
            a += dstride - m

cdef void pyxd_vector_double_copyswap(void * dest, void * src, int swap, void * arr):
    cdef char * a 
    cdef char * b 
    cdef char c = 0
    cdef int j
    cdef int m
    cdef cpp_vector[double] * new_dest
    if src != NULL:
        new_dest = mk_vector_double.renew(dest)
        new_dest[0] = (<cpp_vector[double] *> src)[0]
    if swap:
        m = sizeof(cpp_vector[double]) / 2
        a = <char *> dest
        b = a + (sizeof(cpp_vector[double]) - 1);
        for j in range(m):
            c = a[0]
            a[0] = b[0]
            a += 1
            b[0] = c
            b -= 1

cdef np.npy_bool pyxd_vector_double_nonzero(void * data, void * arr):
    return (data != NULL)
    # FIXME comparisons not defined for arbitrary types
    #cdef cpp_vector[double] zero = cpp_vector[double]()
    #return ((<cpp_vector[double] *> data)[0] != zero)

cdef int pyxd_vector_double_compare(const void * d1, const void * d2, void * arr):
    return (d1 == d2) - 1
    # FIXME comparisons not defined for arbitrary types
    #if deref(<cpp_vector[double] *> d1) == deref(<cpp_vector[double] *> d2):
    #    return 0
    #else:
    #    return -1

cdef PyArray_ArrFuncs PyXD_VectorDouble_ArrFuncs 
PyArray_InitArrFuncs(&PyXD_VectorDouble_ArrFuncs)
PyXD_VectorDouble_ArrFuncs.getitem = <PyArray_GetItemFunc *> (&pyxd_vector_double_getitem)
PyXD_VectorDouble_ArrFuncs.setitem = <PyArray_SetItemFunc *> (&pyxd_vector_double_setitem)
PyXD_VectorDouble_ArrFuncs.copyswapn = <PyArray_CopySwapNFunc *> (&pyxd_vector_double_copyswapn)
PyXD_VectorDouble_ArrFuncs.copyswap = <PyArray_CopySwapFunc *> (&pyxd_vector_double_copyswap)
PyXD_VectorDouble_ArrFuncs.nonzero = <PyArray_NonzeroFunc *> (&pyxd_vector_double_nonzero)
PyXD_VectorDouble_ArrFuncs.compare = <PyArray_CompareFunc *> (&pyxd_vector_double_compare)

cdef object pyxd_vector_double_type_alloc(PyTypeObject * self, Py_ssize_t nitems):
    cdef PyXDVectorDouble_Type * cval
    cdef object pyval
    cval = mk_vector_double_type.defnew()
    cval.ob_typ = self
    pyval = <object> cval
    return pyval

cdef void pyxd_vector_double_type_dealloc(object self):
    cdef PyXDVectorDouble_Type * cself = <PyXDVectorDouble_Type *> self
    mk_vector_double_type.deall(cself)
    return

cdef object pyxd_vector_double_type_new(PyTypeObject * subtype, object args, object kwds):
    return pyxd_vector_double_type_alloc(subtype, 0)

cdef void pyxd_vector_double_type_free(void * self):
    return

cdef object pyxd_vector_double_type_str(object self):
    cdef PyXDVectorDouble_Type * cself = <PyXDVectorDouble_Type *> self
    cdef np.ndarray val_proxy
    cdef np.npy_intp val_proxy_shape[1]
    val_proxy_shape[0] = <np.npy_intp> (cself.obval).size()
    val_proxy = np.PyArray_SimpleNewFromData(1, val_proxy_shape, np.NPY_FLOAT64, &(cself.obval)[0])
    pyval = val_proxy
    s = str(pyval)
    return s

cdef object pyxd_vector_double_type_repr(object self):
    cdef PyXDVectorDouble_Type * cself = <PyXDVectorDouble_Type *> self
    cdef np.ndarray val_proxy
    cdef np.npy_intp val_proxy_shape[1]
    val_proxy_shape[0] = <np.npy_intp> (cself.obval).size()
    val_proxy = np.PyArray_SimpleNewFromData(1, val_proxy_shape, np.NPY_FLOAT64, &(cself.obval)[0])
    pyval = val_proxy
    s = repr(pyval)
    return s

cdef int pyxd_vector_double_type_compare(object a, object b):
    return (a is b) - 1
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDVectorDouble_Type * x
    #cdef PyXDVectorDouble_Type * y
    #if type(a) is not type(b):
    #    raise NotImplementedError
    #x = <PyXDVectorDouble_Type *> a
    #y = <PyXDVectorDouble_Type *> b
    #if (x.obval == y.obval):
    #    return 0
    #elif (x.obval < y.obval):
    #    return -1
    #elif (x.obval > y.obval):
    #    return 1
    #else:
    #    raise NotImplementedError

cdef object pyxd_vector_double_type_richcompare(object a, object b, int op):
    if op == Py_EQ:
        return (a is b)
    elif op == Py_NE:
        return (a is not b)
    else:
        return NotImplemented
    # FIXME comparisons not defined for arbitrary types
    #cdef PyXDVectorDouble_Type * x
    #cdef PyXDVectorDouble_Type * y
    #if type(a) is not type(b):
    #    return NotImplemented
    #x = <PyXDVectorDouble_Type *> a
    #y = <PyXDVectorDouble_Type *> b
    #if op == Py_LT:
    #    return (x.obval < y.obval)
    #elif op == Py_LE:
    #    return (x.obval <= y.obval)
    #elif op == Py_EQ:
    #    return (x.obval == y.obval)
    #elif op == Py_NE:
    #    return (x.obval != y.obval)
    #elif op == Py_GT:
    #    return (x.obval > y.obval)
    #elif op == Py_GE:
    #    return (x.obval >= y.obval)
    #else:
    #    return NotImplemented    

cdef long pyxd_vector_double_type_hash(object self):
    return id(self)

cdef PyMemberDef pyxd_vector_double_type_members[1]
pyxd_vector_double_type_members[0] = PyMemberDef(NULL, 0, 0, 0, NULL)

cdef PyGetSetDef pyxd_vector_double_type_getset[1]
pyxd_vector_double_type_getset[0] = PyGetSetDef(NULL, NULL, NULL, NULL, NULL)

cdef bint pyxd_vector_double_is_ready
cdef type PyXD_VectorDouble = type("xd_vector_double", ((<object> PyArray_API[10]),), {})
pyxd_vector_double_is_ready = PyType_Ready(<object> PyXD_VectorDouble)
(<PyTypeObject *> PyXD_VectorDouble).tp_basicsize = sizeof(PyXDVectorDouble_Type)
(<PyTypeObject *> PyXD_VectorDouble).tp_itemsize = 0
(<PyTypeObject *> PyXD_VectorDouble).tp_doc = "Python scalar type for cpp_vector[double]"
(<PyTypeObject *> PyXD_VectorDouble).tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_CHECKTYPES | Py_TPFLAGS_HEAPTYPE
(<PyTypeObject *> PyXD_VectorDouble).tp_alloc = pyxd_vector_double_type_alloc
(<PyTypeObject *> PyXD_VectorDouble).tp_dealloc = pyxd_vector_double_type_dealloc
(<PyTypeObject *> PyXD_VectorDouble).tp_new = pyxd_vector_double_type_new
(<PyTypeObject *> PyXD_VectorDouble).tp_free = pyxd_vector_double_type_free
(<PyTypeObject *> PyXD_VectorDouble).tp_str = pyxd_vector_double_type_str
(<PyTypeObject *> PyXD_VectorDouble).tp_repr = pyxd_vector_double_type_repr
(<PyTypeObject *> PyXD_VectorDouble).tp_base = (<PyTypeObject *> PyArray_API[10])  # PyGenericArrType_Type
(<PyTypeObject *> PyXD_VectorDouble).tp_hash = pyxd_vector_double_type_hash
emit_ifpy2k()
(<PyTypeObject *> PyXD_VectorDouble).tp_compare = &pyxd_vector_double_type_compare
emit_endif()
(<PyTypeObject *> PyXD_VectorDouble).tp_richcompare = pyxd_vector_double_type_richcompare
(<PyTypeObject *> PyXD_VectorDouble).tp_members = pyxd_vector_double_type_members
(<PyTypeObject *> PyXD_VectorDouble).tp_getset = pyxd_vector_double_type_getset
pyxd_vector_double_is_ready = PyType_Ready(<object> PyXD_VectorDouble)
Py_INCREF(PyXD_VectorDouble)
XDVectorDouble = PyXD_VectorDouble

cdef PyArray_Descr * c_xd_vector_double_descr = <PyArray_Descr *> malloc(sizeof(PyArray_Descr))
(<PyObject *> c_xd_vector_double_descr).ob_refcnt = 0 # ob_refcnt
(<PyObject *> c_xd_vector_double_descr).ob_type = <PyTypeObject *> PyArray_API[3]
c_xd_vector_double_descr.typeobj = <PyTypeObject *> PyXD_VectorDouble # typeobj
c_xd_vector_double_descr.kind = 'x'  # kind, for xdress
c_xd_vector_double_descr.type = 'x'  # type
c_xd_vector_double_descr.byteorder = '='  # byteorder
c_xd_vector_double_descr.flags = NPY_USE_GETITEM  # flags
c_xd_vector_double_descr.type_num = 0    # type_num, assigned at registration
c_xd_vector_double_descr.elsize = sizeof(cpp_vector[double])  # elsize, 
c_xd_vector_double_descr.alignment = 8  # alignment
c_xd_vector_double_descr.subarray = NULL  # subarray
c_xd_vector_double_descr.fields = NULL  # fields
c_xd_vector_double_descr.names = NULL
(<PyArray_Descr *> c_xd_vector_double_descr).f = <PyArray_ArrFuncs *> &PyXD_VectorDouble_ArrFuncs  # f == PyArray_ArrFuncs

cdef object xd_vector_double_descr = <object> (<void *> c_xd_vector_double_descr)
Py_INCREF(<object> xd_vector_double_descr)
xd_vector_double = xd_vector_double_descr
cdef int xd_vector_double_num = PyArray_RegisterDataType(c_xd_vector_double_descr)
dtypes['vector_double'] = xd_vector_double
dtypes['xd_vector_double'] = xd_vector_double
dtypes[xd_vector_double_num] = xd_vector_double



